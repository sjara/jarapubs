'''
Make figure about how long it takes for firing rate to change after switch.

Data generated by: generate_summary_reward_modulation_after_switch.py
'''


import os, sys
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from jaratoolbox import colorpalette as cp
from jaratoolbox import extraplots
from jaratoolbox import settings
import matplotlib.gridspec as gridspec
import matplotlib
import figparams
reload(figparams)
import matplotlib.patches as mpatches
import scipy.stats as stats
from scipy import optimize
import reward_change_sessions as sessionsInfo

INCLUDE_SHUFFLED = 0

SAVE_FIGURE = 1
outputDir = '/tmp/'
figFilename = 'modulation_after_switch' # Do not include extension
figFormat = 'pdf' # 'pdf' or 'svg'
figSize = [7,5] # In inches

fontSizeLabels = figparams.fontSizeLabels
fontSizeTicks = figparams.fontSizeTicks
fontSizePanel = figparams.fontSizePanel

labelPosX = [0.01, 0.51]   # Horiz position for panel labels
labelPosY = [0.95, 0.48]    # Vert position for panel labels

#colorEachArea = [cp.TangoPalette['Chameleon3'], cp.TangoPalette['Chameleon2'],'k']
colorEachPeriod = [figparams.colp['MoreRewardR'],figparams.colp['MoreRewardL']]

xLimits = [-60,60]

if INCLUDE_SHUFFLED:
    gs = gridspec.GridSpec(3, 2)
else:
    gs = gridspec.GridSpec(2, 2)
gs.update(left=0.13, right=0.98, top=0.95, bottom=0.1, wspace=0.45, hspace=0.2)


FIGNAME = 'reward_modulation_after_switch'
figDataFile = 'summary_rewardmod_after_switch.npz'
figDataDir = os.path.join(settings.FIGURES_DATA_PATH, figparams.STUDY_NAME, FIGNAME)
figDataFullPath = os.path.join(figDataDir,figDataFile)
figDataFileBehavior = 'behavior_change_after_switch.npz'
figDataFullPathBehavior = os.path.join(figDataDir,figDataFileBehavior)

if INCLUDE_SHUFFLED:
    figDataFileShuffled = 'summary_rewardmod_after_switch_shuffled.npz'
    figDataFullPathShuffled = os.path.join(figDataDir,figDataFileShuffled)
    figDataFileBehaviorShuffled = 'behavior_change_after_switch_shuffled.npz'
    figDataFullPathBehaviorShuffled = os.path.join(figDataDir,figDataFileBehaviorShuffled)

matplotlib.rcParams['font.family'] = 'Helvetica'
matplotlib.rcParams['svg.fonttype'] = 'none'

# -- Load data ephys --
figData = np.load(figDataFullPath)
if INCLUDE_SHUFFLED:
    figDataShuffled = np.load(figDataFullPathShuffled)

if INCLUDE_SHUFFLED:
    condLabels = ['AC','pStr','shuffled']
    avgSpikesInTransition = [figData['avgSpikesInTransitionAC'],
                             figData['avgSpikesInTransitionAStr'],
                             figDataShuffled['avgSpikesInTransitionAStr']]
else:
    condLabels = ['AC','pStr']
    avgSpikesInTransition = [figData['avgSpikesInTransitionAC'],
                             figData['avgSpikesInTransitionAStr']]
    nCells = [figData['avgSpikesInTransitionAC'].shape[0],figData['avgSpikesInTransitionAStr'].shape[0]]
nTrialsAroundTransition = figData['nTrialsAroundTransition']

# -- Params for smoothing --
smoothWinSize= 16;
winShape = np.concatenate((np.zeros(smoothWinSize),np.ones(smoothWinSize))) # Causal
#winShape = np.concatenate((np.zeros(smoothWinSize/2),np.ones(smoothWinSize))) # Almost causal
#winShape = np.ones(smoothWinSize) # Acausal
winShape = winShape/np.sum(winShape)

'''
# -- For fitting exponential --
def fixedintercept_exponential(xval,intercept, tau,amp=1,offset=0):
    return amp*np.exp(-(xval-offset)/tau) - amp*np.exp(offset/tau) + intercept

def error_fixed_exponential(theta,xval,yval,intercept):
    yhat = fixedintercept_exponential(xval,intercept,*theta)
    return np.sum((yval-yhat)**2)
'''

#trialVec = np.arange(-nTrialsAroundTransition,nTrialsAroundTransition)
trialVec = np.arange(-nTrialsAroundTransition,nTrialsAroundTransition)+1
#preLims = [-60,0]
#farPostLims = [10,60]
preLims = [-100,-2]
farPostLims = [10,100]
postLims = [0,50]
prePeriod = (trialVec>preLims[0]) & (trialVec<=preLims[1])
postPeriod = (trialVec>postLims[0]) & (trialVec<=postLims[1])
farPostPeriod = (trialVec>postLims[0]+10) & (trialVec<=postLims[1]+10)

meanFiringAcrossCells = []
smoothMeanFiringAcrossCells = []
preFiringAcrossCells = []
postFiringAcrossCells = []
farPostFiringAcrossCells = []
thetaFiringAcrossCells = []
yFitFiringAcrossCells = []
for inda,avgSpikes in enumerate(avgSpikesInTransition):
    stdPre = np.std(avgSpikes[:nTrialsAroundTransition])
    normedMeanFiringThisArea = np.mean(avgSpikes,axis=0)/stdPre
    meanFiringAcrossCells.append(normedMeanFiringThisArea)
    smoothMeanFiringThisArea = np.convolve(normedMeanFiringThisArea,winShape,mode='same')
    smoothMeanFiringAcrossCells.append(smoothMeanFiringThisArea)
    points = meanFiringAcrossCells[inda]
    meanPre = np.mean(points[prePeriod])
    pointsPost = points[postPeriod]
    '''
    # -- Fit exponential --
    xval = np.arange(*postLims)
    yMeasured = pointsPost
    intercept = meanPre
    theta0 = np.array([6, 0.6, 0]) # tau, amp, offset
    thetahat = optimize.fmin(error_fixed_exponential, theta0, args=(xval,yMeasured,intercept), disp=False)
    yFit = fixedintercept_exponential(xval, intercept, *thetahat)
    yFitFiringAcrossCells.append(yFit)
    thetaFiringAcrossCells.append(thetahat)
    print(thetahat)
    '''
    preFiringAcrossCells.append(meanPre)
    postFiringAcrossCells.append(np.mean(points[postPeriod]))
    farPostFiringAcrossCells.append(np.mean(points[farPostPeriod]))
 
    
# -- Load data behavior --
figDataBehavior = np.load(figDataFullPathBehavior)
avgChoiceAClow = figDataBehavior['avgChoiceInTransitionAC_low']
avgChoiceAChigh = figDataBehavior['avgChoiceInTransitionAC_high']
avgChoiceAStrlow = figDataBehavior['avgChoiceInTransitionAStr_low']
avgChoiceAStrhigh = figDataBehavior['avgChoiceInTransitionAStr_high']
nSessions = [avgChoiceAClow.shape[0], avgChoiceAStrlow.shape[0]]
    
# -- Shuffled data --
if INCLUDE_SHUFFLED:
    figDataBehaviorS = np.load(figDataFullPathBehaviorShuffled)
    avgChoiceAClowS = figDataBehaviorS['avgChoiceInTransitionAC_low']
    avgChoiceAChighS = figDataBehaviorS['avgChoiceInTransitionAC_high']
    avgChoiceAStrlowS = figDataBehaviorS['avgChoiceInTransitionAStr_low']
    avgChoiceAStrhighS = figDataBehaviorS['avgChoiceInTransitionAStr_high']

nTrialsAroundTransitionBehav = figData['nTrialsAroundTransition']
trialVecBehav = np.arange(-nTrialsAroundTransitionBehav,nTrialsAroundTransitionBehav)+1


if INCLUDE_SHUFFLED:
    avgChoiceAroundTransition = [np.vstack((avgChoiceAClow,avgChoiceAChigh)),
                                 np.vstack((avgChoiceAStrlow,avgChoiceAStrhigh)),
                                 np.vstack((avgChoiceAClowS,avgChoiceAChighS))]
else:
    avgChoiceAroundTransition = [np.vstack((avgChoiceAClow,avgChoiceAChigh)),
                                 np.vstack((avgChoiceAStrlow,avgChoiceAStrhigh))]

meanChoiceAcrossSessions = []
smoothMeanChoiceAcrossSessions = []
preChoiceAcrossSessions = []
farPostChoiceAcrossSessions = []
for inda,avgChoice in enumerate(avgChoiceAroundTransition):
    meanChoiceThisArea = np.mean(avgChoice,axis=0)
    meanChoiceAcrossSessions.append(meanChoiceThisArea)
    smoothMeanChoiceThisArea = np.convolve(meanChoiceThisArea,winShape,mode='same')
    smoothMeanChoiceAcrossSessions.append(smoothMeanChoiceThisArea)
    preChoiceAcrossSessions.append(np.mean(meanChoiceThisArea[prePeriod]))
    farPostChoiceAcrossSessions.append(np.mean(meanChoiceThisArea[farPostPeriod]))


# -- Plot results --
fig = plt.gcf()
fig.clf()
fig.set_facecolor('w')

plt.clf()
panelLabels = [['A','C'],['B','D']]
nMice = [len(sessionsInfo.acAnimals), len(sessionsInfo.astrAnimals)]
for inda,brainArea in enumerate(condLabels):
    #plt.subplot(3,2, 2*inda+1)
    axBehav = plt.subplot(gs[inda,0])
    plt.hold(True)
    plt.plot(trialVecBehav, 100*meanChoiceAcrossSessions[inda], '.-', color='0.8')
    #plt.plot(trialVecBehav, 100*smoothMeanChoiceAcrossSessions[inda], color=colorEachArea[inda], lw=4)
    plt.plot(preLims,np.tile(100*preChoiceAcrossSessions[inda],2), color=colorEachPeriod[0], lw=4)
    plt.plot(farPostLims,np.tile(100*farPostChoiceAcrossSessions[inda],2), color=colorEachPeriod[1], lw=4)
    #plt.axvline(0,color='0.5')
    plt.text(-30,-5,brainArea,fontsize=fontSizeLabels+2,fontweight='normal',ha='center')
    plt.text(-30,-7,'({} mice)'.format(nMice[inda]),fontsize=fontSizeLabels,fontweight='normal',ha='center')
    plt.xlim(xLimits)
    plt.ylim([-10,10])
    if inda==0:
        axBehav.set_xticklabels([])
    else:
        plt.xlabel('Trials since block transition',fontsize=fontSizeLabels)
    plt.ylabel('Rightward choices\n compared to average (%)',fontsize=fontSizeLabels)
    extraplots.boxoff(axBehav)
    print('{}: {} sessions'.format(brainArea,nSessions[inda]))
    
    axEphys = plt.subplot(gs[inda,1])
    plt.hold(True)
    plt.plot(trialVec,meanFiringAcrossCells[inda],'.-',color='0.8')
    ###plt.plot(trialVec,smoothMeanFiringAcrossCells[inda],color=colorEachArea[inda],lw=4)
    plt.plot(preLims,np.tile(preFiringAcrossCells[inda],2), color=colorEachPeriod[0], lw=4)
    plt.plot(farPostLims,np.tile(farPostFiringAcrossCells[inda],2), color=colorEachPeriod[1], lw=4)
    ###plt.plot(xval,yFitFiringAcrossCells[inda], color=colorEachArea[inda], lw=4)
    #plt.axvline(0,color='0.5')
    plt.text(-30,-0.38,brainArea,fontsize=fontSizeLabels+2,fontweight='normal',ha='center')
    plt.text(-30,-0.5,'({} cells)'.format(nCells[inda]),fontsize=fontSizeLabels,fontweight='normal',ha='center')
    if inda==0:
        axEphys.set_xticklabels([])
    else:
        plt.xlabel('Trials since block transition',fontsize=fontSizeLabels)
    plt.xlim(xLimits)
    plt.ylim([-0.6,0.6])
    plt.ylabel('Average normalized\nfiring rate across cells',fontsize=fontSizeLabels)
    extraplots.boxoff(axEphys)
    print('{}: {} cells'.format(brainArea,nCells[inda]))

    axBehav.annotate(panelLabels[inda][0], xy=(labelPosX[inda],labelPosY[0]), xycoords='figure fraction',
                 fontsize=fontSizePanel, fontweight='bold')
    axEphys.annotate(panelLabels[inda][1], xy=(labelPosX[inda],labelPosY[1]), xycoords='figure fraction',
                 fontsize=fontSizePanel, fontweight='bold')
    
axBehav.annotate('Behavior', xy=(0.32,0.95), xycoords='figure fraction',
                 fontsize=fontSizeLabels+2, fontweight='normal', ha='center')
axBehav.annotate('Physiology', xy=(0.82,0.95), xycoords='figure fraction',
                 fontsize=fontSizeLabels+2, fontweight='normal', ha='center')
  
plt.show()

if SAVE_FIGURE:
    extraplots.save_figure(figFilename, figFormat, figSize, outputDir)

